function updateHubSpotContacts() {
  const sheet = SpreadsheetApp.openById('YOUR_SPREADSHEET_ID').getSheetByName('YOUR_SHEET_NAME');

  if (!sheet) {
    Logger.log("Error: Could not find the sheet. Please check the sheet name.");
    return;
  }

  // Log progress
  Logger.log(`Last row in the sheet: ${sheet.getLastRow()}`);

  // Iterate through rows, starting from row 2 to include all records (assuming row 1 is headers)
  for (let row = 2; row <= sheet.getLastRow(); row++) {
    const rowData = sheet.getRange(row, 1, 1, sheet.getLastColumn()).getValues()[0];

    // Extract contact data from the row
    const contactData = {
      email: rowData[1] && rowData[1] !== "NULL" ? rowData[1] : "", // Column B
      firstname: rowData[8] && rowData[8] !== "NULL" ? rowData[8].substring(0, 99) : "", // Column I
      lastname: rowData[9] && rowData[9] !== "NULL" ? rowData[9].substring(0, 99) : "", // Column J
      phone: rowData[10] && rowData[10] !== "NULL" ? rowData[10] : "", // Column K
      city: rowData[11] && rowData[11] !== "NULL" ? rowData[11].substring(0, 99) : "", // Column L
      country: rowData[12] && rowData[12] !== "NULL" ? rowData[12].substring(0, 99) : "", // Column M
      jobtitle: rowData[15] && rowData[15] !== "NULL" ? rowData[15].substring(0, 99) : "", // Column P
      company: rowData[16] && rowData[16] !== "NULL" ? rowData[16].substring(0, 99) : "", // Column Q
      skills: rowData[13] && rowData[13] !== "NULL" ? rowData[13].substring(0, 99) : "", // Column N
      systems_and_methods: rowData[14] && rowData[14] !== "NULL" ? rowData[14].substring(0, 99) : "" // Column O
    };

    // Skip rows without email
    if (!contactData.email) {
      Logger.log(`Error: Email is missing in row ${row}. Skipping.`);
      continue;
    }

    // Log the contact data to be sent to HubSpot
    Logger.log("Sending data to HubSpot: " + JSON.stringify(contactData));

    // Send data to HubSpot
    sendDataToHubSpot(contactData);
  }
}

function sendDataToHubSpot(contactData) {
  const hubSpotUrl = "HUBSPOT_URL";
  const accessToken = "YOUR_ACCESS_TOKEN";

  // Search for existing contact by email
  const searchUrl = `${hubSpotUrl}/search`;
  const searchPayload = {
    filterGroups: [
      {
        filters: [
          {
            propertyName: "email",
            operator: "EQ",
            value: contactData.email
          }
        ]
      }
    ]
  };

  const searchResponse = UrlFetchApp.fetch(searchUrl, {
    method: "post",
    headers: {
      "Authorization": `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    },
    payload: JSON.stringify(searchPayload),
    muteHttpExceptions: true
  });

  const searchResult = JSON.parse(searchResponse.getContentText());

  // If contact exists, skip creation
  if (searchResult.total > 0) {
    Logger.log("Contact already exists in HubSpot. Skipping update.");
    return;
  }

  // Create new contact in HubSpot
  const createPayload = { properties: contactData };
  const createResponse = UrlFetchApp.fetch(hubSpotUrl, {
    method: "post",
    headers: {
      "Authorization": `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    },
    payload: JSON.stringify(createPayload),
    muteHttpExceptions: true
  });

  // Log the response from HubSpot
  Logger.log("Response: " + createResponse.getContentText());
}
